// Code generated by mocktail; DO NOT EDIT.

package message

import (
	"context"
	"testing"
	"time"

	"github.com/stretchr/testify/mock"
)

// messageMock mock of Message.
type messageMock struct{ mock.Mock }

// NewMessageMock creates a new messageMock.
func NewMessageMock(tb testing.TB) *messageMock {
	tb.Helper()

	m := &messageMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *messageMock) ListMessages(_ context.Context, channelType ChannelType, channelURL string, listMessagesRequest ListMessagesRequest) (*ListMessagesResponse, error) {
	_ret := _m.Called(channelType, channelURL, listMessagesRequest)

	if _rf, ok := _ret.Get(0).(func(ChannelType, string, ListMessagesRequest) (*ListMessagesResponse, error)); ok {
		return _rf(channelType, channelURL, listMessagesRequest)
	}

	_ra0, _ := _ret.Get(0).(*ListMessagesResponse)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *messageMock) OnListMessages(channelType ChannelType, channelURL string, listMessagesRequest ListMessagesRequest) *messageListMessagesCall {
	return &messageListMessagesCall{Call: _m.Mock.On("ListMessages", channelType, channelURL, listMessagesRequest), Parent: _m}
}

func (_m *messageMock) OnListMessagesRaw(channelType interface{}, channelURL interface{}, listMessagesRequest interface{}) *messageListMessagesCall {
	return &messageListMessagesCall{Call: _m.Mock.On("ListMessages", channelType, channelURL, listMessagesRequest), Parent: _m}
}

type messageListMessagesCall struct {
	*mock.Call
	Parent *messageMock
}

func (_c *messageListMessagesCall) Panic(msg string) *messageListMessagesCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *messageListMessagesCall) Once() *messageListMessagesCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *messageListMessagesCall) Twice() *messageListMessagesCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *messageListMessagesCall) Times(i int) *messageListMessagesCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *messageListMessagesCall) WaitUntil(w <-chan time.Time) *messageListMessagesCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *messageListMessagesCall) After(d time.Duration) *messageListMessagesCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *messageListMessagesCall) Run(fn func(args mock.Arguments)) *messageListMessagesCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *messageListMessagesCall) Maybe() *messageListMessagesCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *messageListMessagesCall) TypedReturns(a *ListMessagesResponse, b error) *messageListMessagesCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *messageListMessagesCall) ReturnsFn(fn func(ChannelType, string, ListMessagesRequest) (*ListMessagesResponse, error)) *messageListMessagesCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *messageListMessagesCall) TypedRun(fn func(ChannelType, string, ListMessagesRequest)) *messageListMessagesCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_channelType, _ := args.Get(0).(ChannelType)
		_channelURL := args.String(1)
		_listMessagesRequest, _ := args.Get(2).(ListMessagesRequest)
		fn(_channelType, _channelURL, _listMessagesRequest)
	})
	return _c
}

func (_c *messageListMessagesCall) OnListMessages(channelType ChannelType, channelURL string, listMessagesRequest ListMessagesRequest) *messageListMessagesCall {
	return _c.Parent.OnListMessages(channelType, channelURL, listMessagesRequest)
}

func (_c *messageListMessagesCall) OnSendMessage(channelType ChannelType, channelURL string, sendMessageRequest SendMessageRequest) *messageSendMessageCall {
	return _c.Parent.OnSendMessage(channelType, channelURL, sendMessageRequest)
}

func (_c *messageListMessagesCall) OnListMessagesRaw(channelType interface{}, channelURL interface{}, listMessagesRequest interface{}) *messageListMessagesCall {
	return _c.Parent.OnListMessagesRaw(channelType, channelURL, listMessagesRequest)
}

func (_c *messageListMessagesCall) OnSendMessageRaw(channelType interface{}, channelURL interface{}, sendMessageRequest interface{}) *messageSendMessageCall {
	return _c.Parent.OnSendMessageRaw(channelType, channelURL, sendMessageRequest)
}

func (_m *messageMock) SendMessage(_ context.Context, channelType ChannelType, channelURL string, sendMessageRequest SendMessageRequest) (*SendMessageResponse, error) {
	_ret := _m.Called(channelType, channelURL, sendMessageRequest)

	if _rf, ok := _ret.Get(0).(func(ChannelType, string, SendMessageRequest) (*SendMessageResponse, error)); ok {
		return _rf(channelType, channelURL, sendMessageRequest)
	}

	_ra0, _ := _ret.Get(0).(*SendMessageResponse)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *messageMock) OnSendMessage(channelType ChannelType, channelURL string, sendMessageRequest SendMessageRequest) *messageSendMessageCall {
	return &messageSendMessageCall{Call: _m.Mock.On("SendMessage", channelType, channelURL, sendMessageRequest), Parent: _m}
}

func (_m *messageMock) OnSendMessageRaw(channelType interface{}, channelURL interface{}, sendMessageRequest interface{}) *messageSendMessageCall {
	return &messageSendMessageCall{Call: _m.Mock.On("SendMessage", channelType, channelURL, sendMessageRequest), Parent: _m}
}

type messageSendMessageCall struct {
	*mock.Call
	Parent *messageMock
}

func (_c *messageSendMessageCall) Panic(msg string) *messageSendMessageCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *messageSendMessageCall) Once() *messageSendMessageCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *messageSendMessageCall) Twice() *messageSendMessageCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *messageSendMessageCall) Times(i int) *messageSendMessageCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *messageSendMessageCall) WaitUntil(w <-chan time.Time) *messageSendMessageCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *messageSendMessageCall) After(d time.Duration) *messageSendMessageCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *messageSendMessageCall) Run(fn func(args mock.Arguments)) *messageSendMessageCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *messageSendMessageCall) Maybe() *messageSendMessageCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *messageSendMessageCall) TypedReturns(a *SendMessageResponse, b error) *messageSendMessageCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *messageSendMessageCall) ReturnsFn(fn func(ChannelType, string, SendMessageRequest) (*SendMessageResponse, error)) *messageSendMessageCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *messageSendMessageCall) TypedRun(fn func(ChannelType, string, SendMessageRequest)) *messageSendMessageCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_channelType, _ := args.Get(0).(ChannelType)
		_channelURL := args.String(1)
		_sendMessageRequest, _ := args.Get(2).(SendMessageRequest)
		fn(_channelType, _channelURL, _sendMessageRequest)
	})
	return _c
}

func (_c *messageSendMessageCall) OnListMessages(channelType ChannelType, channelURL string, listMessagesRequest ListMessagesRequest) *messageListMessagesCall {
	return _c.Parent.OnListMessages(channelType, channelURL, listMessagesRequest)
}

func (_c *messageSendMessageCall) OnSendMessage(channelType ChannelType, channelURL string, sendMessageRequest SendMessageRequest) *messageSendMessageCall {
	return _c.Parent.OnSendMessage(channelType, channelURL, sendMessageRequest)
}

func (_c *messageSendMessageCall) OnListMessagesRaw(channelType interface{}, channelURL interface{}, listMessagesRequest interface{}) *messageListMessagesCall {
	return _c.Parent.OnListMessagesRaw(channelType, channelURL, listMessagesRequest)
}

func (_c *messageSendMessageCall) OnSendMessageRaw(channelType interface{}, channelURL interface{}, sendMessageRequest interface{}) *messageSendMessageCall {
	return _c.Parent.OnSendMessageRaw(channelType, channelURL, sendMessageRequest)
}

// Code generated by mocktail; DO NOT EDIT.

package channel

import (
	"context"
	"testing"
	"time"

	"github.com/stretchr/testify/mock"
)

// channelMock mock of Channel.
type channelMock struct{ mock.Mock }

// NewChannelMock creates a new channelMock.
func NewChannelMock(tb testing.TB) *channelMock {
	tb.Helper()

	m := &channelMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *channelMock) CreateGroupChannel(_ context.Context, createChannelRequest CreateGroupChannelRequest) (*CreateGroupChannelResponse, error) {
	_ret := _m.Called(createChannelRequest)

	if _rf, ok := _ret.Get(0).(func(CreateGroupChannelRequest) (*CreateGroupChannelResponse, error)); ok {
		return _rf(createChannelRequest)
	}

	_ra0, _ := _ret.Get(0).(*CreateGroupChannelResponse)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *channelMock) OnCreateGroupChannel(createChannelRequest CreateGroupChannelRequest) *channelCreateGroupChannelCall {
	return &channelCreateGroupChannelCall{Call: _m.Mock.On("CreateGroupChannel", createChannelRequest), Parent: _m}
}

func (_m *channelMock) OnCreateGroupChannelRaw(createChannelRequest interface{}) *channelCreateGroupChannelCall {
	return &channelCreateGroupChannelCall{Call: _m.Mock.On("CreateGroupChannel", createChannelRequest), Parent: _m}
}

type channelCreateGroupChannelCall struct {
	*mock.Call
	Parent *channelMock
}

func (_c *channelCreateGroupChannelCall) Panic(msg string) *channelCreateGroupChannelCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *channelCreateGroupChannelCall) Once() *channelCreateGroupChannelCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *channelCreateGroupChannelCall) Twice() *channelCreateGroupChannelCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *channelCreateGroupChannelCall) Times(i int) *channelCreateGroupChannelCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *channelCreateGroupChannelCall) WaitUntil(w <-chan time.Time) *channelCreateGroupChannelCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *channelCreateGroupChannelCall) After(d time.Duration) *channelCreateGroupChannelCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *channelCreateGroupChannelCall) Run(fn func(args mock.Arguments)) *channelCreateGroupChannelCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *channelCreateGroupChannelCall) Maybe() *channelCreateGroupChannelCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *channelCreateGroupChannelCall) TypedReturns(a *CreateGroupChannelResponse, b error) *channelCreateGroupChannelCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *channelCreateGroupChannelCall) ReturnsFn(fn func(CreateGroupChannelRequest) (*CreateGroupChannelResponse, error)) *channelCreateGroupChannelCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *channelCreateGroupChannelCall) TypedRun(fn func(CreateGroupChannelRequest)) *channelCreateGroupChannelCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_createChannelRequest, _ := args.Get(0).(CreateGroupChannelRequest)
		fn(_createChannelRequest)
	})
	return _c
}

func (_c *channelCreateGroupChannelCall) OnCreateGroupChannel(createChannelRequest CreateGroupChannelRequest) *channelCreateGroupChannelCall {
	return _c.Parent.OnCreateGroupChannel(createChannelRequest)
}

func (_c *channelCreateGroupChannelCall) OnListGroupChannels(listChannelRequest ListGroupChannelRequest) *channelListGroupChannelsCall {
	return _c.Parent.OnListGroupChannels(listChannelRequest)
}

func (_c *channelCreateGroupChannelCall) OnMarkAsRead(channelURL string, userID string) *channelMarkAsReadCall {
	return _c.Parent.OnMarkAsRead(channelURL, userID)
}

func (_c *channelCreateGroupChannelCall) OnStartTyping(channelURL string, userIDs []string) *channelStartTypingCall {
	return _c.Parent.OnStartTyping(channelURL, userIDs)
}

func (_c *channelCreateGroupChannelCall) OnStopTyping(channelURL string, userIDs []string) *channelStopTypingCall {
	return _c.Parent.OnStopTyping(channelURL, userIDs)
}

func (_c *channelCreateGroupChannelCall) OnUpdateGroupChannel(channelURL string, updateChannelRequest UpdateGroupChannelRequest) *channelUpdateGroupChannelCall {
	return _c.Parent.OnUpdateGroupChannel(channelURL, updateChannelRequest)
}

func (_c *channelCreateGroupChannelCall) OnCreateGroupChannelRaw(createChannelRequest interface{}) *channelCreateGroupChannelCall {
	return _c.Parent.OnCreateGroupChannelRaw(createChannelRequest)
}

func (_c *channelCreateGroupChannelCall) OnListGroupChannelsRaw(listChannelRequest interface{}) *channelListGroupChannelsCall {
	return _c.Parent.OnListGroupChannelsRaw(listChannelRequest)
}

func (_c *channelCreateGroupChannelCall) OnMarkAsReadRaw(channelURL interface{}, userID interface{}) *channelMarkAsReadCall {
	return _c.Parent.OnMarkAsReadRaw(channelURL, userID)
}

func (_c *channelCreateGroupChannelCall) OnStartTypingRaw(channelURL interface{}, userIDs interface{}) *channelStartTypingCall {
	return _c.Parent.OnStartTypingRaw(channelURL, userIDs)
}

func (_c *channelCreateGroupChannelCall) OnStopTypingRaw(channelURL interface{}, userIDs interface{}) *channelStopTypingCall {
	return _c.Parent.OnStopTypingRaw(channelURL, userIDs)
}

func (_c *channelCreateGroupChannelCall) OnUpdateGroupChannelRaw(channelURL interface{}, updateChannelRequest interface{}) *channelUpdateGroupChannelCall {
	return _c.Parent.OnUpdateGroupChannelRaw(channelURL, updateChannelRequest)
}

func (_m *channelMock) ListGroupChannels(_ context.Context, listChannelRequest ListGroupChannelRequest) (*ListGroupChannelResponse, error) {
	_ret := _m.Called(listChannelRequest)

	if _rf, ok := _ret.Get(0).(func(ListGroupChannelRequest) (*ListGroupChannelResponse, error)); ok {
		return _rf(listChannelRequest)
	}

	_ra0, _ := _ret.Get(0).(*ListGroupChannelResponse)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *channelMock) OnListGroupChannels(listChannelRequest ListGroupChannelRequest) *channelListGroupChannelsCall {
	return &channelListGroupChannelsCall{Call: _m.Mock.On("ListGroupChannels", listChannelRequest), Parent: _m}
}

func (_m *channelMock) OnListGroupChannelsRaw(listChannelRequest interface{}) *channelListGroupChannelsCall {
	return &channelListGroupChannelsCall{Call: _m.Mock.On("ListGroupChannels", listChannelRequest), Parent: _m}
}

type channelListGroupChannelsCall struct {
	*mock.Call
	Parent *channelMock
}

func (_c *channelListGroupChannelsCall) Panic(msg string) *channelListGroupChannelsCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *channelListGroupChannelsCall) Once() *channelListGroupChannelsCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *channelListGroupChannelsCall) Twice() *channelListGroupChannelsCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *channelListGroupChannelsCall) Times(i int) *channelListGroupChannelsCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *channelListGroupChannelsCall) WaitUntil(w <-chan time.Time) *channelListGroupChannelsCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *channelListGroupChannelsCall) After(d time.Duration) *channelListGroupChannelsCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *channelListGroupChannelsCall) Run(fn func(args mock.Arguments)) *channelListGroupChannelsCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *channelListGroupChannelsCall) Maybe() *channelListGroupChannelsCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *channelListGroupChannelsCall) TypedReturns(a *ListGroupChannelResponse, b error) *channelListGroupChannelsCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *channelListGroupChannelsCall) ReturnsFn(fn func(ListGroupChannelRequest) (*ListGroupChannelResponse, error)) *channelListGroupChannelsCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *channelListGroupChannelsCall) TypedRun(fn func(ListGroupChannelRequest)) *channelListGroupChannelsCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_listChannelRequest, _ := args.Get(0).(ListGroupChannelRequest)
		fn(_listChannelRequest)
	})
	return _c
}

func (_c *channelListGroupChannelsCall) OnCreateGroupChannel(createChannelRequest CreateGroupChannelRequest) *channelCreateGroupChannelCall {
	return _c.Parent.OnCreateGroupChannel(createChannelRequest)
}

func (_c *channelListGroupChannelsCall) OnListGroupChannels(listChannelRequest ListGroupChannelRequest) *channelListGroupChannelsCall {
	return _c.Parent.OnListGroupChannels(listChannelRequest)
}

func (_c *channelListGroupChannelsCall) OnMarkAsRead(channelURL string, userID string) *channelMarkAsReadCall {
	return _c.Parent.OnMarkAsRead(channelURL, userID)
}

func (_c *channelListGroupChannelsCall) OnStartTyping(channelURL string, userIDs []string) *channelStartTypingCall {
	return _c.Parent.OnStartTyping(channelURL, userIDs)
}

func (_c *channelListGroupChannelsCall) OnStopTyping(channelURL string, userIDs []string) *channelStopTypingCall {
	return _c.Parent.OnStopTyping(channelURL, userIDs)
}

func (_c *channelListGroupChannelsCall) OnUpdateGroupChannel(channelURL string, updateChannelRequest UpdateGroupChannelRequest) *channelUpdateGroupChannelCall {
	return _c.Parent.OnUpdateGroupChannel(channelURL, updateChannelRequest)
}

func (_c *channelListGroupChannelsCall) OnCreateGroupChannelRaw(createChannelRequest interface{}) *channelCreateGroupChannelCall {
	return _c.Parent.OnCreateGroupChannelRaw(createChannelRequest)
}

func (_c *channelListGroupChannelsCall) OnListGroupChannelsRaw(listChannelRequest interface{}) *channelListGroupChannelsCall {
	return _c.Parent.OnListGroupChannelsRaw(listChannelRequest)
}

func (_c *channelListGroupChannelsCall) OnMarkAsReadRaw(channelURL interface{}, userID interface{}) *channelMarkAsReadCall {
	return _c.Parent.OnMarkAsReadRaw(channelURL, userID)
}

func (_c *channelListGroupChannelsCall) OnStartTypingRaw(channelURL interface{}, userIDs interface{}) *channelStartTypingCall {
	return _c.Parent.OnStartTypingRaw(channelURL, userIDs)
}

func (_c *channelListGroupChannelsCall) OnStopTypingRaw(channelURL interface{}, userIDs interface{}) *channelStopTypingCall {
	return _c.Parent.OnStopTypingRaw(channelURL, userIDs)
}

func (_c *channelListGroupChannelsCall) OnUpdateGroupChannelRaw(channelURL interface{}, updateChannelRequest interface{}) *channelUpdateGroupChannelCall {
	return _c.Parent.OnUpdateGroupChannelRaw(channelURL, updateChannelRequest)
}

func (_m *channelMock) MarkAsRead(_ context.Context, channelURL string, userID string) error {
	_ret := _m.Called(channelURL, userID)

	if _rf, ok := _ret.Get(0).(func(string, string) error); ok {
		return _rf(channelURL, userID)
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *channelMock) OnMarkAsRead(channelURL string, userID string) *channelMarkAsReadCall {
	return &channelMarkAsReadCall{Call: _m.Mock.On("MarkAsRead", channelURL, userID), Parent: _m}
}

func (_m *channelMock) OnMarkAsReadRaw(channelURL interface{}, userID interface{}) *channelMarkAsReadCall {
	return &channelMarkAsReadCall{Call: _m.Mock.On("MarkAsRead", channelURL, userID), Parent: _m}
}

type channelMarkAsReadCall struct {
	*mock.Call
	Parent *channelMock
}

func (_c *channelMarkAsReadCall) Panic(msg string) *channelMarkAsReadCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *channelMarkAsReadCall) Once() *channelMarkAsReadCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *channelMarkAsReadCall) Twice() *channelMarkAsReadCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *channelMarkAsReadCall) Times(i int) *channelMarkAsReadCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *channelMarkAsReadCall) WaitUntil(w <-chan time.Time) *channelMarkAsReadCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *channelMarkAsReadCall) After(d time.Duration) *channelMarkAsReadCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *channelMarkAsReadCall) Run(fn func(args mock.Arguments)) *channelMarkAsReadCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *channelMarkAsReadCall) Maybe() *channelMarkAsReadCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *channelMarkAsReadCall) TypedReturns(a error) *channelMarkAsReadCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *channelMarkAsReadCall) ReturnsFn(fn func(string, string) error) *channelMarkAsReadCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *channelMarkAsReadCall) TypedRun(fn func(string, string)) *channelMarkAsReadCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_channelURL := args.String(0)
		_userID := args.String(1)
		fn(_channelURL, _userID)
	})
	return _c
}

func (_c *channelMarkAsReadCall) OnCreateGroupChannel(createChannelRequest CreateGroupChannelRequest) *channelCreateGroupChannelCall {
	return _c.Parent.OnCreateGroupChannel(createChannelRequest)
}

func (_c *channelMarkAsReadCall) OnListGroupChannels(listChannelRequest ListGroupChannelRequest) *channelListGroupChannelsCall {
	return _c.Parent.OnListGroupChannels(listChannelRequest)
}

func (_c *channelMarkAsReadCall) OnMarkAsRead(channelURL string, userID string) *channelMarkAsReadCall {
	return _c.Parent.OnMarkAsRead(channelURL, userID)
}

func (_c *channelMarkAsReadCall) OnStartTyping(channelURL string, userIDs []string) *channelStartTypingCall {
	return _c.Parent.OnStartTyping(channelURL, userIDs)
}

func (_c *channelMarkAsReadCall) OnStopTyping(channelURL string, userIDs []string) *channelStopTypingCall {
	return _c.Parent.OnStopTyping(channelURL, userIDs)
}

func (_c *channelMarkAsReadCall) OnUpdateGroupChannel(channelURL string, updateChannelRequest UpdateGroupChannelRequest) *channelUpdateGroupChannelCall {
	return _c.Parent.OnUpdateGroupChannel(channelURL, updateChannelRequest)
}

func (_c *channelMarkAsReadCall) OnCreateGroupChannelRaw(createChannelRequest interface{}) *channelCreateGroupChannelCall {
	return _c.Parent.OnCreateGroupChannelRaw(createChannelRequest)
}

func (_c *channelMarkAsReadCall) OnListGroupChannelsRaw(listChannelRequest interface{}) *channelListGroupChannelsCall {
	return _c.Parent.OnListGroupChannelsRaw(listChannelRequest)
}

func (_c *channelMarkAsReadCall) OnMarkAsReadRaw(channelURL interface{}, userID interface{}) *channelMarkAsReadCall {
	return _c.Parent.OnMarkAsReadRaw(channelURL, userID)
}

func (_c *channelMarkAsReadCall) OnStartTypingRaw(channelURL interface{}, userIDs interface{}) *channelStartTypingCall {
	return _c.Parent.OnStartTypingRaw(channelURL, userIDs)
}

func (_c *channelMarkAsReadCall) OnStopTypingRaw(channelURL interface{}, userIDs interface{}) *channelStopTypingCall {
	return _c.Parent.OnStopTypingRaw(channelURL, userIDs)
}

func (_c *channelMarkAsReadCall) OnUpdateGroupChannelRaw(channelURL interface{}, updateChannelRequest interface{}) *channelUpdateGroupChannelCall {
	return _c.Parent.OnUpdateGroupChannelRaw(channelURL, updateChannelRequest)
}

func (_m *channelMock) StartTyping(_ context.Context, channelURL string, userIDs []string) error {
	_ret := _m.Called(channelURL, userIDs)

	if _rf, ok := _ret.Get(0).(func(string, []string) error); ok {
		return _rf(channelURL, userIDs)
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *channelMock) OnStartTyping(channelURL string, userIDs []string) *channelStartTypingCall {
	return &channelStartTypingCall{Call: _m.Mock.On("StartTyping", channelURL, userIDs), Parent: _m}
}

func (_m *channelMock) OnStartTypingRaw(channelURL interface{}, userIDs interface{}) *channelStartTypingCall {
	return &channelStartTypingCall{Call: _m.Mock.On("StartTyping", channelURL, userIDs), Parent: _m}
}

type channelStartTypingCall struct {
	*mock.Call
	Parent *channelMock
}

func (_c *channelStartTypingCall) Panic(msg string) *channelStartTypingCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *channelStartTypingCall) Once() *channelStartTypingCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *channelStartTypingCall) Twice() *channelStartTypingCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *channelStartTypingCall) Times(i int) *channelStartTypingCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *channelStartTypingCall) WaitUntil(w <-chan time.Time) *channelStartTypingCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *channelStartTypingCall) After(d time.Duration) *channelStartTypingCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *channelStartTypingCall) Run(fn func(args mock.Arguments)) *channelStartTypingCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *channelStartTypingCall) Maybe() *channelStartTypingCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *channelStartTypingCall) TypedReturns(a error) *channelStartTypingCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *channelStartTypingCall) ReturnsFn(fn func(string, []string) error) *channelStartTypingCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *channelStartTypingCall) TypedRun(fn func(string, []string)) *channelStartTypingCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_channelURL := args.String(0)
		_userIDs, _ := args.Get(1).([]string)
		fn(_channelURL, _userIDs)
	})
	return _c
}

func (_c *channelStartTypingCall) OnCreateGroupChannel(createChannelRequest CreateGroupChannelRequest) *channelCreateGroupChannelCall {
	return _c.Parent.OnCreateGroupChannel(createChannelRequest)
}

func (_c *channelStartTypingCall) OnListGroupChannels(listChannelRequest ListGroupChannelRequest) *channelListGroupChannelsCall {
	return _c.Parent.OnListGroupChannels(listChannelRequest)
}

func (_c *channelStartTypingCall) OnMarkAsRead(channelURL string, userID string) *channelMarkAsReadCall {
	return _c.Parent.OnMarkAsRead(channelURL, userID)
}

func (_c *channelStartTypingCall) OnStartTyping(channelURL string, userIDs []string) *channelStartTypingCall {
	return _c.Parent.OnStartTyping(channelURL, userIDs)
}

func (_c *channelStartTypingCall) OnStopTyping(channelURL string, userIDs []string) *channelStopTypingCall {
	return _c.Parent.OnStopTyping(channelURL, userIDs)
}

func (_c *channelStartTypingCall) OnUpdateGroupChannel(channelURL string, updateChannelRequest UpdateGroupChannelRequest) *channelUpdateGroupChannelCall {
	return _c.Parent.OnUpdateGroupChannel(channelURL, updateChannelRequest)
}

func (_c *channelStartTypingCall) OnCreateGroupChannelRaw(createChannelRequest interface{}) *channelCreateGroupChannelCall {
	return _c.Parent.OnCreateGroupChannelRaw(createChannelRequest)
}

func (_c *channelStartTypingCall) OnListGroupChannelsRaw(listChannelRequest interface{}) *channelListGroupChannelsCall {
	return _c.Parent.OnListGroupChannelsRaw(listChannelRequest)
}

func (_c *channelStartTypingCall) OnMarkAsReadRaw(channelURL interface{}, userID interface{}) *channelMarkAsReadCall {
	return _c.Parent.OnMarkAsReadRaw(channelURL, userID)
}

func (_c *channelStartTypingCall) OnStartTypingRaw(channelURL interface{}, userIDs interface{}) *channelStartTypingCall {
	return _c.Parent.OnStartTypingRaw(channelURL, userIDs)
}

func (_c *channelStartTypingCall) OnStopTypingRaw(channelURL interface{}, userIDs interface{}) *channelStopTypingCall {
	return _c.Parent.OnStopTypingRaw(channelURL, userIDs)
}

func (_c *channelStartTypingCall) OnUpdateGroupChannelRaw(channelURL interface{}, updateChannelRequest interface{}) *channelUpdateGroupChannelCall {
	return _c.Parent.OnUpdateGroupChannelRaw(channelURL, updateChannelRequest)
}

func (_m *channelMock) StopTyping(_ context.Context, channelURL string, userIDs []string) error {
	_ret := _m.Called(channelURL, userIDs)

	if _rf, ok := _ret.Get(0).(func(string, []string) error); ok {
		return _rf(channelURL, userIDs)
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *channelMock) OnStopTyping(channelURL string, userIDs []string) *channelStopTypingCall {
	return &channelStopTypingCall{Call: _m.Mock.On("StopTyping", channelURL, userIDs), Parent: _m}
}

func (_m *channelMock) OnStopTypingRaw(channelURL interface{}, userIDs interface{}) *channelStopTypingCall {
	return &channelStopTypingCall{Call: _m.Mock.On("StopTyping", channelURL, userIDs), Parent: _m}
}

type channelStopTypingCall struct {
	*mock.Call
	Parent *channelMock
}

func (_c *channelStopTypingCall) Panic(msg string) *channelStopTypingCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *channelStopTypingCall) Once() *channelStopTypingCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *channelStopTypingCall) Twice() *channelStopTypingCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *channelStopTypingCall) Times(i int) *channelStopTypingCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *channelStopTypingCall) WaitUntil(w <-chan time.Time) *channelStopTypingCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *channelStopTypingCall) After(d time.Duration) *channelStopTypingCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *channelStopTypingCall) Run(fn func(args mock.Arguments)) *channelStopTypingCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *channelStopTypingCall) Maybe() *channelStopTypingCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *channelStopTypingCall) TypedReturns(a error) *channelStopTypingCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *channelStopTypingCall) ReturnsFn(fn func(string, []string) error) *channelStopTypingCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *channelStopTypingCall) TypedRun(fn func(string, []string)) *channelStopTypingCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_channelURL := args.String(0)
		_userIDs, _ := args.Get(1).([]string)
		fn(_channelURL, _userIDs)
	})
	return _c
}

func (_c *channelStopTypingCall) OnCreateGroupChannel(createChannelRequest CreateGroupChannelRequest) *channelCreateGroupChannelCall {
	return _c.Parent.OnCreateGroupChannel(createChannelRequest)
}

func (_c *channelStopTypingCall) OnListGroupChannels(listChannelRequest ListGroupChannelRequest) *channelListGroupChannelsCall {
	return _c.Parent.OnListGroupChannels(listChannelRequest)
}

func (_c *channelStopTypingCall) OnMarkAsRead(channelURL string, userID string) *channelMarkAsReadCall {
	return _c.Parent.OnMarkAsRead(channelURL, userID)
}

func (_c *channelStopTypingCall) OnStartTyping(channelURL string, userIDs []string) *channelStartTypingCall {
	return _c.Parent.OnStartTyping(channelURL, userIDs)
}

func (_c *channelStopTypingCall) OnStopTyping(channelURL string, userIDs []string) *channelStopTypingCall {
	return _c.Parent.OnStopTyping(channelURL, userIDs)
}

func (_c *channelStopTypingCall) OnUpdateGroupChannel(channelURL string, updateChannelRequest UpdateGroupChannelRequest) *channelUpdateGroupChannelCall {
	return _c.Parent.OnUpdateGroupChannel(channelURL, updateChannelRequest)
}

func (_c *channelStopTypingCall) OnCreateGroupChannelRaw(createChannelRequest interface{}) *channelCreateGroupChannelCall {
	return _c.Parent.OnCreateGroupChannelRaw(createChannelRequest)
}

func (_c *channelStopTypingCall) OnListGroupChannelsRaw(listChannelRequest interface{}) *channelListGroupChannelsCall {
	return _c.Parent.OnListGroupChannelsRaw(listChannelRequest)
}

func (_c *channelStopTypingCall) OnMarkAsReadRaw(channelURL interface{}, userID interface{}) *channelMarkAsReadCall {
	return _c.Parent.OnMarkAsReadRaw(channelURL, userID)
}

func (_c *channelStopTypingCall) OnStartTypingRaw(channelURL interface{}, userIDs interface{}) *channelStartTypingCall {
	return _c.Parent.OnStartTypingRaw(channelURL, userIDs)
}

func (_c *channelStopTypingCall) OnStopTypingRaw(channelURL interface{}, userIDs interface{}) *channelStopTypingCall {
	return _c.Parent.OnStopTypingRaw(channelURL, userIDs)
}

func (_c *channelStopTypingCall) OnUpdateGroupChannelRaw(channelURL interface{}, updateChannelRequest interface{}) *channelUpdateGroupChannelCall {
	return _c.Parent.OnUpdateGroupChannelRaw(channelURL, updateChannelRequest)
}

func (_m *channelMock) UpdateGroupChannel(_ context.Context, channelURL string, updateChannelRequest UpdateGroupChannelRequest) (*UpdateGroupChannelResponse, error) {
	_ret := _m.Called(channelURL, updateChannelRequest)

	if _rf, ok := _ret.Get(0).(func(string, UpdateGroupChannelRequest) (*UpdateGroupChannelResponse, error)); ok {
		return _rf(channelURL, updateChannelRequest)
	}

	_ra0, _ := _ret.Get(0).(*UpdateGroupChannelResponse)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *channelMock) OnUpdateGroupChannel(channelURL string, updateChannelRequest UpdateGroupChannelRequest) *channelUpdateGroupChannelCall {
	return &channelUpdateGroupChannelCall{Call: _m.Mock.On("UpdateGroupChannel", channelURL, updateChannelRequest), Parent: _m}
}

func (_m *channelMock) OnUpdateGroupChannelRaw(channelURL interface{}, updateChannelRequest interface{}) *channelUpdateGroupChannelCall {
	return &channelUpdateGroupChannelCall{Call: _m.Mock.On("UpdateGroupChannel", channelURL, updateChannelRequest), Parent: _m}
}

type channelUpdateGroupChannelCall struct {
	*mock.Call
	Parent *channelMock
}

func (_c *channelUpdateGroupChannelCall) Panic(msg string) *channelUpdateGroupChannelCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *channelUpdateGroupChannelCall) Once() *channelUpdateGroupChannelCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *channelUpdateGroupChannelCall) Twice() *channelUpdateGroupChannelCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *channelUpdateGroupChannelCall) Times(i int) *channelUpdateGroupChannelCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *channelUpdateGroupChannelCall) WaitUntil(w <-chan time.Time) *channelUpdateGroupChannelCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *channelUpdateGroupChannelCall) After(d time.Duration) *channelUpdateGroupChannelCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *channelUpdateGroupChannelCall) Run(fn func(args mock.Arguments)) *channelUpdateGroupChannelCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *channelUpdateGroupChannelCall) Maybe() *channelUpdateGroupChannelCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *channelUpdateGroupChannelCall) TypedReturns(a *UpdateGroupChannelResponse, b error) *channelUpdateGroupChannelCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *channelUpdateGroupChannelCall) ReturnsFn(fn func(string, UpdateGroupChannelRequest) (*UpdateGroupChannelResponse, error)) *channelUpdateGroupChannelCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *channelUpdateGroupChannelCall) TypedRun(fn func(string, UpdateGroupChannelRequest)) *channelUpdateGroupChannelCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_channelURL := args.String(0)
		_updateChannelRequest, _ := args.Get(1).(UpdateGroupChannelRequest)
		fn(_channelURL, _updateChannelRequest)
	})
	return _c
}

func (_c *channelUpdateGroupChannelCall) OnCreateGroupChannel(createChannelRequest CreateGroupChannelRequest) *channelCreateGroupChannelCall {
	return _c.Parent.OnCreateGroupChannel(createChannelRequest)
}

func (_c *channelUpdateGroupChannelCall) OnListGroupChannels(listChannelRequest ListGroupChannelRequest) *channelListGroupChannelsCall {
	return _c.Parent.OnListGroupChannels(listChannelRequest)
}

func (_c *channelUpdateGroupChannelCall) OnMarkAsRead(channelURL string, userID string) *channelMarkAsReadCall {
	return _c.Parent.OnMarkAsRead(channelURL, userID)
}

func (_c *channelUpdateGroupChannelCall) OnStartTyping(channelURL string, userIDs []string) *channelStartTypingCall {
	return _c.Parent.OnStartTyping(channelURL, userIDs)
}

func (_c *channelUpdateGroupChannelCall) OnStopTyping(channelURL string, userIDs []string) *channelStopTypingCall {
	return _c.Parent.OnStopTyping(channelURL, userIDs)
}

func (_c *channelUpdateGroupChannelCall) OnUpdateGroupChannel(channelURL string, updateChannelRequest UpdateGroupChannelRequest) *channelUpdateGroupChannelCall {
	return _c.Parent.OnUpdateGroupChannel(channelURL, updateChannelRequest)
}

func (_c *channelUpdateGroupChannelCall) OnCreateGroupChannelRaw(createChannelRequest interface{}) *channelCreateGroupChannelCall {
	return _c.Parent.OnCreateGroupChannelRaw(createChannelRequest)
}

func (_c *channelUpdateGroupChannelCall) OnListGroupChannelsRaw(listChannelRequest interface{}) *channelListGroupChannelsCall {
	return _c.Parent.OnListGroupChannelsRaw(listChannelRequest)
}

func (_c *channelUpdateGroupChannelCall) OnMarkAsReadRaw(channelURL interface{}, userID interface{}) *channelMarkAsReadCall {
	return _c.Parent.OnMarkAsReadRaw(channelURL, userID)
}

func (_c *channelUpdateGroupChannelCall) OnStartTypingRaw(channelURL interface{}, userIDs interface{}) *channelStartTypingCall {
	return _c.Parent.OnStartTypingRaw(channelURL, userIDs)
}

func (_c *channelUpdateGroupChannelCall) OnStopTypingRaw(channelURL interface{}, userIDs interface{}) *channelStopTypingCall {
	return _c.Parent.OnStopTypingRaw(channelURL, userIDs)
}

func (_c *channelUpdateGroupChannelCall) OnUpdateGroupChannelRaw(channelURL interface{}, updateChannelRequest interface{}) *channelUpdateGroupChannelCall {
	return _c.Parent.OnUpdateGroupChannelRaw(channelURL, updateChannelRequest)
}
